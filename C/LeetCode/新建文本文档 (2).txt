/**
 * Return an array of arrays of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */

#define SIZE 2000

int compare(const void *p1, const void *p2){
    return *((int *)p1) - *((int *)p2);
}

int judge(int *nums, int len, int a, int b){
    for(int i = 0;i<len;i++){
        if(nums[i][0]==a&&nums[i][1]==b){
            return 0;
        }
    }
    return 1;
}

int** threeSum(int* nums, int numsSize, int* returnSize) {
    int cnt = 0;
    qsort(nums,numsSize,sizeof(int),compare);
    int **re = (int **)malloc(sizeof(int *)*SIZE);
    for(int i = 0;i<SIZE;i++){
        re[i] = (int *)malloc(sizeof(int)*3);
    }
    for(int i = 0;nums[i]<=0;i++){
        for(int j = i+1;nums[i]+num[j]<=0&&j<numsSize-1;j++){
            for(int k = i+2;k<numsSize;k++){
                if(num[i]+num[j]+num[k]>0)
                    break;
                if(num[i]+num[j]+num[k]==0){
                    if(judge(re,cnt,num[i],num[j])){
                        re[cnt][0] = num[i];
                        re[cnt][1] = num[j];
                        re[cnt][2] = num[k];
                        cnt++;
                        break;
                    }
                }
            }
        }
    }
    return re;
}